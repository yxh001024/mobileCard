<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.yxh.mobile.dao.packageInfoMapper">
  <resultMap id="BaseResultMap" type="com.yxh.mobile.entity.packageInfo">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="package_name" jdbcType="VARCHAR" property="packageName" />
    <result column="package_talk" jdbcType="INTEGER" property="packageTalk" />
    <result column="package_sms" jdbcType="INTEGER" property="packageSms" />
    <result column="package_flow" jdbcType="INTEGER" property="packageFlow" />
    <result column="package_price" jdbcType="DOUBLE" property="packagePrice" />
    <result column="over_talk" jdbcType="DOUBLE" property="overTalk" />
    <result column="over_sms" jdbcType="DOUBLE" property="overSms" />
    <result column="over_flow" jdbcType="DOUBLE" property="overFlow" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, package_name, package_talk, package_sms, package_flow, package_price, over_talk, 
    over_sms, over_flow
  </sql>
  <select id="selectByExample" parameterType="com.yxh.mobile.entity.packageInfoExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from packageinfo
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from packageinfo
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from packageinfo
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.yxh.mobile.entity.packageInfoExample">
    delete from packageinfo
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.yxh.mobile.entity.packageInfo">
    insert into packageinfo (id, package_name, package_talk, 
      package_sms, package_flow, package_price, 
      over_talk, over_sms, over_flow
      )
    values (#{id,jdbcType=BIGINT}, #{packageName,jdbcType=VARCHAR}, #{packageTalk,jdbcType=INTEGER}, 
      #{packageSms,jdbcType=INTEGER}, #{packageFlow,jdbcType=INTEGER}, #{packagePrice,jdbcType=DOUBLE}, 
      #{overTalk,jdbcType=DOUBLE}, #{overSms,jdbcType=DOUBLE}, #{overFlow,jdbcType=DOUBLE}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.yxh.mobile.entity.packageInfo">
    insert into packageinfo
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="packageName != null">
        package_name,
      </if>
      <if test="packageTalk != null">
        package_talk,
      </if>
      <if test="packageSms != null">
        package_sms,
      </if>
      <if test="packageFlow != null">
        package_flow,
      </if>
      <if test="packagePrice != null">
        package_price,
      </if>
      <if test="overTalk != null">
        over_talk,
      </if>
      <if test="overSms != null">
        over_sms,
      </if>
      <if test="overFlow != null">
        over_flow,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      <if test="packageName != null">
        #{packageName,jdbcType=VARCHAR},
      </if>
      <if test="packageTalk != null">
        #{packageTalk,jdbcType=INTEGER},
      </if>
      <if test="packageSms != null">
        #{packageSms,jdbcType=INTEGER},
      </if>
      <if test="packageFlow != null">
        #{packageFlow,jdbcType=INTEGER},
      </if>
      <if test="packagePrice != null">
        #{packagePrice,jdbcType=DOUBLE},
      </if>
      <if test="overTalk != null">
        #{overTalk,jdbcType=DOUBLE},
      </if>
      <if test="overSms != null">
        #{overSms,jdbcType=DOUBLE},
      </if>
      <if test="overFlow != null">
        #{overFlow,jdbcType=DOUBLE},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.yxh.mobile.entity.packageInfoExample" resultType="java.lang.Long">
    select count(*) from packageinfo
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update packageinfo
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.packageName != null">
        package_name = #{record.packageName,jdbcType=VARCHAR},
      </if>
      <if test="record.packageTalk != null">
        package_talk = #{record.packageTalk,jdbcType=INTEGER},
      </if>
      <if test="record.packageSms != null">
        package_sms = #{record.packageSms,jdbcType=INTEGER},
      </if>
      <if test="record.packageFlow != null">
        package_flow = #{record.packageFlow,jdbcType=INTEGER},
      </if>
      <if test="record.packagePrice != null">
        package_price = #{record.packagePrice,jdbcType=DOUBLE},
      </if>
      <if test="record.overTalk != null">
        over_talk = #{record.overTalk,jdbcType=DOUBLE},
      </if>
      <if test="record.overSms != null">
        over_sms = #{record.overSms,jdbcType=DOUBLE},
      </if>
      <if test="record.overFlow != null">
        over_flow = #{record.overFlow,jdbcType=DOUBLE},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update packageinfo
    set id = #{record.id,jdbcType=BIGINT},
      package_name = #{record.packageName,jdbcType=VARCHAR},
      package_talk = #{record.packageTalk,jdbcType=INTEGER},
      package_sms = #{record.packageSms,jdbcType=INTEGER},
      package_flow = #{record.packageFlow,jdbcType=INTEGER},
      package_price = #{record.packagePrice,jdbcType=DOUBLE},
      over_talk = #{record.overTalk,jdbcType=DOUBLE},
      over_sms = #{record.overSms,jdbcType=DOUBLE},
      over_flow = #{record.overFlow,jdbcType=DOUBLE}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.yxh.mobile.entity.packageInfo">
    update packageinfo
    <set>
      <if test="packageName != null">
        package_name = #{packageName,jdbcType=VARCHAR},
      </if>
      <if test="packageTalk != null">
        package_talk = #{packageTalk,jdbcType=INTEGER},
      </if>
      <if test="packageSms != null">
        package_sms = #{packageSms,jdbcType=INTEGER},
      </if>
      <if test="packageFlow != null">
        package_flow = #{packageFlow,jdbcType=INTEGER},
      </if>
      <if test="packagePrice != null">
        package_price = #{packagePrice,jdbcType=DOUBLE},
      </if>
      <if test="overTalk != null">
        over_talk = #{overTalk,jdbcType=DOUBLE},
      </if>
      <if test="overSms != null">
        over_sms = #{overSms,jdbcType=DOUBLE},
      </if>
      <if test="overFlow != null">
        over_flow = #{overFlow,jdbcType=DOUBLE},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.yxh.mobile.entity.packageInfo">
    update packageinfo
    set package_name = #{packageName,jdbcType=VARCHAR},
      package_talk = #{packageTalk,jdbcType=INTEGER},
      package_sms = #{packageSms,jdbcType=INTEGER},
      package_flow = #{packageFlow,jdbcType=INTEGER},
      package_price = #{packagePrice,jdbcType=DOUBLE},
      over_talk = #{overTalk,jdbcType=DOUBLE},
      over_sms = #{overSms,jdbcType=DOUBLE},
      over_flow = #{overFlow,jdbcType=DOUBLE}
    where id = #{id,jdbcType=BIGINT}
  </update>
</mapper>